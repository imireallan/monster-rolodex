{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search/search.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","monster","className","src","id","alt","loading","name","email","CardList","monsters","map","Search","searchText","onInputChange","type","placeholder","value","onChange","e","target","App","useState","setMonsters","setSearchText","useEffect","a","fetch","response","json","fetchMonsters","filteredMonsters","filter","toLowerCase","includes","toLocaleLowerCase","length","color","width","style","display","placeItems","minHeight","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kUAGe,SAASA,EAAT,GAA4B,IAAZC,EAAW,EAAXA,QAC3B,OACI,sBAAKC,UAAU,OAAf,UACI,qBACIC,IAAG,+BAA0BF,EAAQG,GAAlC,0BACHC,IAAI,UACJC,QAAQ,SAEZ,6BAAKL,EAAQM,OACb,4BAAIN,EAAQO,W,MCRT,SAASC,EAAT,GAAiC,IAAbC,EAAY,EAAZA,SAC/B,OACI,qBAAKR,UAAU,YAAf,SACKQ,EAASC,KAAI,SAACV,GACX,OAAO,cAACD,EAAD,CAAuBC,QAASA,GAArBA,EAAQG,S,MCL3B,SAASQ,EAAT,GAAgD,IAA9BC,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,cACzC,OACI,qBAAKZ,UAAU,SAAf,SACI,uBACIa,KAAK,SACLC,YAAY,qBACZC,MAAOJ,EACPK,SAAU,SAACC,GACPL,EAAcK,EAAEC,OAAOH,YCwC5BI,MA7Cf,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACJZ,EADI,KACMa,EADN,OAEyBD,mBAAS,IAFlC,mBAEJT,EAFI,KAEQW,EAFR,KAGXC,qBAAU,YACa,uCAAG,8BAAAC,EAAA,sEACKC,MACnB,8CAFc,cACZC,EADY,gBAIKA,EAASC,OAJd,OAIZnB,EAJY,OAKlBa,EAAYb,GALM,2CAAH,qDAQnBoB,KACD,IAEH,IAAMC,EAAmBrB,EAASsB,QAAO,SAAC/B,GAAD,OACrCA,EAAQM,KAAK0B,cAAcC,SAASrB,EAAWsB,wBAGnD,OACI,sBAAKjC,UAAU,YAAf,UACI,iDACA,qBAAKA,UAAU,SAAf,SACI,cAACU,EAAD,CAAQC,WAAYA,EAAYC,cAAeU,MAEnD,8BACMd,EAAS0B,OAYP,cAAC3B,EAAD,CAAUC,SAAUqB,IAXpB,cAAC,IAAD,CACIhB,KAAK,OACLsB,MAAM,kBACNC,MAAO,IACPC,MAAO,CACHC,QAAS,OACTC,WAAY,SACZC,UAAW,iBC5BxBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1f6effc0.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nexport default function Card({ monster }) {\n    return (\n        <div className=\"card\">\n            <img\n                src={`https://robohash.org/${monster.id}?set=set2&size=180x180`}\n                alt=\"monster\"\n                loading=\"lazy\"\n            />\n            <h2>{monster.name}</h2>\n            <p>{monster.email}</p>\n        </div>\n    );\n}\n","import React from 'react';\nimport Card from '../card/card.component';\nimport './card-list.styles.css';\n\nexport default function CardList({ monsters }) {\n    return (\n        <div className=\"card-list\">\n            {monsters.map((monster) => {\n                return <Card key={monster.id} monster={monster} />;\n            })}\n        </div>\n    );\n}\n","import React from 'react';\nimport './search.styles.css';\n\nexport default function Search({ searchText, onInputChange }) {\n    return (\n        <div className=\"search\">\n            <input\n                type=\"search\"\n                placeholder=\"Search monster....\"\n                value={searchText}\n                onChange={(e) => {\n                    onInputChange(e.target.value);\n                }}\n            />\n        </div>\n    );\n}\n","import { useState, useEffect } from 'react';\nimport Loader from 'react-loader-spinner';\nimport './App.css';\nimport CardList from './components/card-list/card-list.component';\nimport Search from './components/search/search.component';\n\nfunction App() {\n    const [monsters, setMonsters] = useState([]);\n    const [searchText, setSearchText] = useState('');\n    useEffect(() => {\n        const fetchMonsters = async () => {\n            const response = await fetch(\n                'https://jsonplaceholder.typicode.com/users'\n            );\n            const monsters = await response.json();\n            setMonsters(monsters);\n        };\n\n        fetchMonsters();\n    }, []);\n\n    const filteredMonsters = monsters.filter((monster) =>\n        monster.name.toLowerCase().includes(searchText.toLocaleLowerCase())\n    );\n\n    return (\n        <div className=\"container\">\n            <h1>Monster Rolodex</h1>\n            <div className=\"search\">\n                <Search searchText={searchText} onInputChange={setSearchText} />\n            </div>\n            <div>\n                {!monsters.length ? (\n                    <Loader\n                        type=\"Bars\"\n                        color=\"rgba(0,0,0,0.7)\"\n                        width={100}\n                        style={{\n                            display: 'grid',\n                            placeItems: 'center',\n                            minHeight: '100vh',\n                        }}\n                    />\n                ) : (\n                    <CardList monsters={filteredMonsters} />\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}